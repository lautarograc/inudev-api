---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/sessions":
    post:
      summary: Create a session (log in)
      tags:
      - Sessions
      parameters: []
      responses:
        '200':
          description: Session created
        '401':
          description: Unauthorized
        '429':
          description: Too Many Requests
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_address:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
              required:
              - email_address
              - password
        required: true
  "/todos":
    get:
      summary: List Todos
      tags:
      - Todos
      security:
      - Bearer: []
      parameters:
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: q
        in: query
        schema:
          type: object
        description: Ransack query parameters
      responses:
        '200':
          description: Todos retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  current_page:
                    type: integer
                  todos:
                    type: array
                    items:
                      "$ref": "#/components/schemas/todo"
                required:
                - total_count
                - current_page
                - todos
    post:
      summary: Create a Todo
      tags:
      - Todos
      parameters: []
      security:
      - Bearer: {}
      responses:
        '201':
          description: Todo created
        '422':
          description: Invalid request
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/todo_input"
  "/todos/{id}":
    parameters:
    - name: id
      in: path
      description: Todo ID
      required: true
      schema:
        type: integer
    get:
      summary: Retrieve a Todo
      tags:
      - Todos
      security:
      - Bearer: []
      responses:
        '200':
          description: Todo found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/todo"
        '404':
          description: Todo not found
    put:
      summary: Update a Todo
      tags:
      - Todos
      parameters: []
      security:
      - Bearer: []
      responses:
        '200':
          description: Todo updated
        '422':
          description: Invalid request
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/todo_input"
    delete:
      summary: Delete a Todo
      tags:
      - Todos
      security:
      - Bearer: []
      responses:
        '204':
          description: Todo deleted
        '404':
          description: Todo not found
  "/users/sign_up":
    post:
      summary: Sign up a new user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: User created
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_address:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
                password_confirmation:
                  type: string
                  example: password123
              required:
              - email_address
              - password
              - password_confirmation
        required: true
components:
  securitySchemes:
    Bearer:
      description: 'JWT Authorization header using the Bearer scheme. Example: ''Authorization'
      type: apiKey
      name: Authorization
      in: header
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
